<?php

namespace app\models;

use Yii;
use yii\data\Pagination;
use yii\db\ActiveRecord;
use yii\db\Exception;
use yii\db\Query;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "article".
 *
 * @property int                  $id
 * @property string|null          $title
 * @property string|null          $description Описание статьи
 * @property string|null          $content     Содержимое статьи
 * @property string|null          $created_at  Дата создания статьи
 * @property string|null          $image
 * @property int|null             $viewed      Количество просмотров статьи
 * @property int|null             $user_id     Id пользователя написавшего статью
 * @property int|null             $status      Статус статьи
 * @property int|null             $category_id Категория статьи
 * @property ArticleTagRelation[] $articleTagRelations
 * @property Comment[]            $comments
 */
class Article extends ActiveRecord
{
    /**
     * количество записей на странице по умолчанию
     */
    const DEFAULT_PAGE_SIZE = 2;

    /**
     *
     */
    const FIRST_OCCURRENCE_IN_STRING = 0;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'article';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title'], 'required'],
            [['title', 'description', 'content'], 'string'],
            [['created_at'], 'date', 'format' => 'php:Y-m-d'],
            [['created_at'], 'default', 'value' => date('Y-m-d')],
            [['title'], 'string', 'max' => 255]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id'          => 'ID',
            'title'       => 'Заголовок статьи',
            'description' => 'Описание статьи',
            'content'     => 'Содержимое статьи',
            'created_at'  => 'Дата создания статьи',
            'image'       => 'Image',
            'viewed'      => 'Количество просмотров статьи',
            'user_id'     => 'Id пользователя написавшего статью',
            'status'      => 'Статус статьи',
            'category_id' => 'Категория статьи',
        ];
    }

    /**
     * Gets query for [[ArticleTagRelations]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getArticleTagRelations()
    {
        return $this->hasMany(ArticleTagRelation::className(), ['article_id' => 'id']);
    }

    /**
     * Gets query for [[Comments]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getComments()
    {
        return $this->hasMany(Comment::className(), ['article_id' => 'id']);
    }

    public function saveImage($fileName)
    {
        $this->image = $fileName;
        return $this->save(false);
    }

    public function deleteImageFromSystem()
    {
        $imageUpload = new UploadImage();
        try {
            $imageUpload->deleteFileInSystem($this->image);
        } catch (\ErrorException $e) {
        }
    }

    public function beforeDelete()
    {
        $this->deleteImageFromSystem();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function getImage()
    {
        return ($this->image) ? '/uploads/' . $this->image : '/dont photo.png';
    }

    public function getCategory()
    {
        return $this->hasOne(Category::class, ['id' => 'category_id']);
    }

    /**
     * Сохраняем категорию в статью и связь с таблицей категории
     *
     * @param $categoryId
     * @return bool
     */
    public function saveCategory($categoryId)
    {
        $categoryModel = Category::findOne($categoryId);

        if (!empty($categoryModel)) {
            $this->link('category', $categoryModel);

            return true;
        }
        return false;
    }

    public function getTags()
    {
        return $this->hasMany(Tag::class, ['id' => 'tag_id'])->viaTable(
            'article_tag_relation',
            ['article_id' => 'id']
        );
    }

    public function getSelectedTags()
    {
        $selectedIds = $this->getTags()->select('id')->asArray()->all();
        return ArrayHelper::getColumn($selectedIds, 'id');
    }

    /**
     * Получаем список данных и их id в виде массива ['id' => 'dataName']
     *
     * @param $list
     * @return array
     */
    public static function getListDataByIdArray($list): array
    {
        return ArrayHelper::map($list, 'id', 'title');
    }

    /**
     * сохраняем связь тегов и статьи
     * @param array $tags
     * @return bool
     */
    public function saveTags(array $tags):bool
    {
        if (is_array($tags)) {

            /**
             * удаляем старые теги если он были
             */
            ArticleTagRelation::deleteAll(['article_id' => $this->id]);

            foreach ($tags as $tagId) {
                $tagModel = Tag::findOne($tagId);

                $this->link('tags', $tagModel);
            }
            return true;
        }
        return false;
    }

    /**
     * приводим дату к единому формату вывода для view
     * @param $date
     * @return false|string
     */
    public function prepareDateToFormat()
    {
        return Yii::$app->formatter->asDate($this->created_at);
    }

    /**
     * 3 самые популярные посты по просмотрам
     * @return array|ActiveRecord[]
     */
    public static function getPopularPosts()
    {
        return self::find()->orderBy(['viewed' => SORT_DESC])->limit(3)->all();
    }

    /**
     * Возвращаем 4 последние поста
     * @return array|ActiveRecord[]
     */
    public static function getRecentPosts()
    {
        return self::find()->orderBy(['created_at' => SORT_DESC])->limit(4)->all();
    }

    /**
     * Возвращаем список категорий с количеством статей по каждой из них
     * @return array
     */
    public static function getCategoryList(): array
    {
        return (new Query())
            ->select(['title' => 'cat.title', 'total_art' => 'cat.id'])
            ->from(['art' => Article::tableName()])
            ->innerJoin(['cat' => Category::tableName(), 'art.category_id = cat.id'])
            ->groupBy('cat.id')
            ->orderBy(['total_art' => SORT_DESC])
            ->all();
    }

    /**
     * @param int $pageSize
     * @return array
     */
    public static function getAllPagination($pageSize = self::DEFAULT_PAGE_SIZE, $categoryId = null): array
    {
        // build a DB query to get all articles with status = 1
        $query = Article::find();

        // get the total number of articles (but do not fetch the article data yet)
        $count = $query
            ->andFilterWhere(['category_id' => $categoryId])
            ->count();

        // create a pagination object with the total count
        $pagination = new Pagination(['totalCount' => $count, 'pageSize' => $pageSize]);

        // limit the query using the pagination and retrieve the articles
        $articles = $query->offset($pagination->offset)
            ->orderBy(['id' => SORT_DESC])
            ->limit($pagination->limit)
            ->all();

        return [
            'articles'   => $articles,
            'pagination' => $pagination
        ];
    }

    /**
     * возвращает обрезанную строку до 255 символов с многоточием в конце если строка больше 255 символов
     * @param     $string
     * @param int $length
     * @return string
     */
    public static function getCutString($string, $length = 255)
    {
        if (strlen($string) > $length){
            return mb_strimwidth($string, self::FIRST_OCCURRENCE_IN_STRING, $length, '...');
        }else{
            return $string;
        }
    }

    /**
     * @param $id
     * @throws Exception
     */
    public static function incrementViewsByArticle($id)
    {
        $articleModel = self::findOne($id);
        if ($articleModel){
            $articleModel->viewed++;
            $articleModel->saveOrThrow();
        }
    }

    /**
     * @param $id
     * @return Article[]
     */
    public static function getListArticlesByCategory($id)
    {
        $categoryIdByArticle = Article::findOne($id)->category_id;

        return Article::findAll(['category_id' => $categoryIdByArticle]);
    }

    /**
     * получаем наиболее популярный пост в данной категории
     * @param $categoryid
     * @return array|ActiveRecord|null
     */
    public static function getMostPopularPostInCategory($categoryid)
    {
        return self::find()->where(['category_id' => $categoryid])->orderby(['viewed' => SORT_DESC])->limit(1)->one();
    }

    /**
     * получаем самый популярный пост
     * @return array|ActiveRecord|null
     */
    public static function getMostPopularPost()
    {
        return self::find()->orderby(['viewed' => SORT_DESC])->limit(1)->one();
    }
}
